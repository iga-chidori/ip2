
# Getting Oriented
## Key information to get you started...

^ This presentation contains key contact and delivery information about the module.


---
## Key Contacts (Staff)

## How We Are Running Things... 

- **PREPARATION**: READINGS, pre-recorded LECTURES, contributuons to a weekly 'Padlet'
- **WORKSHOPS**: Reviewing questions and issues arising from the previous week's PRACTICAL session. Your input to the 'Padlet' will guide the first half of each week's 'workshop'. READINGS and weekly topic group-discussions. The second half will be 'live coding' in an **I do/We do** format.
- **PRACTICALS**: A mix of lectured and self-led exercises of weekly programming.


---
## Assessments

- **Timed Skills Assessment%** (15% of module grade; 2 hours; 3 for those with *Inclusion Plans*): A quiz designed to test students' understanding of basic Python concepts covered in the module.
^ **1** Students may begin the test at any time in a 24-hour window, but once begun they will have 2 hours to complete the test. The time limit is 3 hours for students with Inclusion Plans. This will be made available after the 2nd practical session in Week 3.
- **Data Set Biography** (25% of module grade; 1,000 words max): A structured reflective essay in which students are prompted to reflect on their understanding of the interactions between the technical and theoretical elements of the module.
^ **2** A Markdown document submitted in Week 6 (after Reading Week). The word limit for this submission is 1,050 words (including reproduction of the questions). The data set for which the 'biography' will be written is the Inside Airbnb data for London.
- **Data-Led Executive Briefing** (60% of module grade; 2,500 words max): A data-led briefing in which students present, for example, a technical analysis that might inform public policy or market research.
^ **3** A Jupyter notebook submitted at the start of Term 2. There are two parts to the notebook: an Executive Briefing and a Reproducible Analysis. The word limit for the Executive Briefing portion of the notebook is 2,500 words. There is no limit to the amount of code in the Reproducible Analysis portion of the notebook.

---
### How to 'Ace' the Assessments?

>  *Study* like you're learning a new language. *Do* the readings. *Talk* to other students. *Ask* for help when you need it!



---
## Where Does FSDS Fit?

- **Geographic Information Systems (GIS)**

- **Quantitative Methods (QM)**

- **Foundations of Spatial Data Science (FSDS)**


## What Are We Trying to Do?

---
## Overall Structure

- **Weeks 1-4:** baking in the 'basics'
- **Weeks 5-7:** engaging with data. 
- **Weeks 8-10:** making sense of data 
^ **1-4** means tackling the 'basics' of Python, foundational concepts in programming, and practicing with the 'tools of the trade' for programmers.
^ **5-7** means different *types* of data (numeric, spatial and textual) with a view to understanding how such data can be cleaned, processed, and aggregated for use in a subsequent analysis. It is commonly held that 80% of 'data science' involves data *cleaning*, so this is a critical phase in developing an *understanding* of data.
^ **8-10** is about visualisation, classification, dimensionality reduction, and clustering. These concepts will have been encountered in other modules, so the intention is that the student will see how these fit into the 'bigger picture' of applied spatial analysis.

---

### Also...

---
### Consequences...

- If you only code during the practical session then you will *not* learn how to code. 
- If you cram the night before then you will *not* learn how to code.
- If you practice for 45 minutes a day then you *will* learn how to code.

---
Layout: Split
### A Bit of Perspective

![](./img/Harris_Tweet.png)
+++
![](./img/CASA_Logo_no_text.png)

---

### The challenges



---
### The rewards

- Lots of support along the way… *if you remember to ask for it!*

See [this thread](https://twitter.com/fossilosophy/status/1342871356254334977?s=21) on moving from academia to data science.

---

### The implications

You will learn to code *best* if you treat it like learning a new language:


- Talk with your friends (*i.e.* Slack).

- Learn how to ask questions (*i.e.* Search Stack Overflow).
- Subscribe to a ‘magazine’ or two (*e.g.* Medium or Pocket).

---
Layout: SectionTitle
# Getting Help

---

### Study Aids

When you need an answer *right now*:

- [Google](https://www.google.co.uk) 
- [Stack Overflow](https://stackoverflow.com/questions/tagged/python)
- [Slack](https://casa-students-2020.slack.com/)

When you want to *learn more*: 

- [Medium](https://medium.com/search?q=python)
- [Pocket](https://app.getpocket.com/search/python)

^ Google will become more useful as you learn more and this is definitely one class in which "I Googled it" is a *good* answer.

^ As of early September 2020, Stack Overflow contains over 1.5 *million* Python questions alone! Chances are someone else has had your question before.

---

### Study 'Right'


It's in the ['Getting Help'](https://moodle.ucl.ac.uk/course/view.php?id=11291&section=4) section on Moodle. I'll update it periodically if I come across useful links/ideas/tips.


---

### *Before* You Ask for Help

From the [Computer Science Wiki](https://computersciencewiki.org/index.php/How_to_ask_for_help):


---

### *Where* to Ask for Help

There is *no* shame in asking for help. None. We are here to support your learning and we have chosen a range of tools to support that:

- [**Slack**](https://www.slack.com): use public `#intro-to-programming` channel for help with coding, practical, and related course questions.
- **Office Hours**: use Teams to contact PGTAs and lecturers for 1:1 help with software, hardware, and more complex issues.
- **Out-of-Hours**: use email to raise personal circumstances and related issues for focussed support. Make use of Professional Services support as-needed to preserve privacy.

^ We'll talk about Slack more [later](./1,4-Tools_of_the_Trade.md), but we think that this is the best way to get help when you need it. Slack enables us to support you as a community of learners across computer / tablet / phone.

---

### *When* to Ask for Help


- When you have been wrestling with a coding question for more than 20 minutes (but see: *How* to Ask for Help!)


---

### *How* to Ask for Help

I liked the "How to ask programming questions" page provided [by ProPublica](https://www.propublica.org/nerds/how-to-ask-programming-questions):


If you find yourself wanting to ask a question on Stack Exchange then they also [have a guide](https://codereview.stackexchange.com/help/how-to-ask), and there are [plenty](https://codingkilledthecat.wordpress.com/2012/06/26/how-to-ask-for-programming-help/) of other [checklists](https://medium.com/better-programming/the-smarter-way-of-asking-for-programming-help-52cd140dc437).

---

## Learn from Your Mistakes

![](./img/Learning_from_Mistakes.png)

---

## One More Thing...



---

### And Finally...

Do **not** allow your computer to auto-update during term. Inevitably, large OS upgrades will break developer tools. Do this by choice *only* when you have time. 


---

### Additional Resources

- See the GIS&T Body of Knowledge (BoK) for quick overview of concepts, techniques, and tools: [gistbok.ucgis.org](https://gistbok.ucgis.org/all-topics?term_node_tid_depth=97).
- A degree of 'plagiarism' is acceptable in **code** since that's how we learn; however, mindless copy+pasting of [Stack Overflow](https://stackoverflow.com) code leads to sphagetti and, often, incorrect results or difficult-to-squash bugs. Think of it like paraphrasing.
- To distinguish between plagiarism and paraphrasing [here's a nice tutorial](https://libguides.sjsu.edu/plagiarism/home-page) that you can also use to help you with your 'regular' writing.
.
